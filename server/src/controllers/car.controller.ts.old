import { Request, Response } from "express";
import { CarModel } from "../models/car.model";
import {
  CreateCarRequest,
  UpdateCarRequest,
  CarFilters,
} from "../types/car.types";
import { AuthRequest } from "../types/auth.types";
import pool from "../config/database.config";

export class CarController {
  // יצירת רכב חדש (dealer בלבד)

  static async createCar(req: AuthRequest, res: Response) {
    try {
      const { user } = req;

      if (!user || user.user_type !== "dealer") {
        return res.status(403).json({
          success: false,
          message: "Only dealers can add cars",
        });
      }
      try {
        await pool.query(
          "INSERT INTO dealers (user_id, business_name, address) VALUES ($1, $2, $3) ON CONFLICT (user_id) DO NOTHING",
          [user.id, user.full_name || "Business", ""]
        );
      } catch (error) {
        console.log("Dealer exists or created");
      }

      const carData: CreateCarRequest = req.body;
      const newCar = await CarModel.create(user.id, carData);

      res.status(201).json({
        success: true,
        message: "Car created successfully",
        data: newCar,
      });
    } catch (error) {
      console.error("Create car error:", error);
      res.status(500).json({
        success: false,
        message: "Failed to create car",
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }

  // קבלת כל הרכבים (עם פילטרים)
  static async getAllCars(req: Request, res: Response) {
    try {
      const filters: CarFilters = {
        make: req.query.make as string,
        model: req.query.model as string,
        year_min: req.query.year_min
          ? parseInt(req.query.year_min as string)
          : undefined,
        year_max: req.query.year_max
          ? parseInt(req.query.year_max as string)
          : undefined,
        price_min: req.query.price_min
          ? parseFloat(req.query.price_min as string)
          : undefined,
        price_max: req.query.price_max
          ? parseFloat(req.query.price_max as string)
          : undefined,
        mileage_max: req.query.mileage_max
          ? parseInt(req.query.mileage_max as string)
          : undefined,
        fuel_type: req.query.fuel_type as string,
        transmission: req.query.transmission as string,
        dealer_id: req.query.dealer_id
          ? parseInt(req.query.dealer_id as string)
          : undefined,
      };

      // הסרת undefined values
      Object.keys(filters).forEach((key) => {
        if (filters[key as keyof CarFilters] === undefined) {
          delete filters[key as keyof CarFilters];
        }
      });

      const cars = await CarModel.findAll(filters);

      res.json({
        success: true,
        data: cars,
        count: cars.length,
      });
    } catch (error) {
      console.error("Get cars error:", error);
      res.status(500).json({
        success: false,
        message: "Failed to fetch cars",
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }

  // קבלת רכב ספציפי
  static async getCarById(req: Request, res: Response) {
    try {
      const carId = parseInt(req.params.id);

      if (isNaN(carId)) {
        return res.status(400).json({
          success: false,
          message: "Invalid car ID",
        });
      }

      const car = await CarModel.findById(carId);

      if (!car) {
        return res.status(404).json({
          success: false,
          message: "Car not found",
        });
      }

      res.json({
        success: true,
        data: car,
      });
    } catch (error) {
      console.error("Get car by ID error:", error);
      res.status(500).json({
        success: false,
        message: "Failed to fetch car",
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }

  // עדכון רכב (dealer בלבד - הרכב שלו)
  static async updateCar(req: AuthRequest, res: Response) {
    try {
      const { user } = req;
      const carId = parseInt(req.params.id);

      if (!user || user.user_type !== "dealer") {
        return res.status(403).json({
          success: false,
          message: "Only dealers can update cars",
        });
      }

      if (isNaN(carId)) {
        return res.status(400).json({
          success: false,
          message: "Invalid car ID",
        });
      }

      // בדיקה שהרכב שייך לסוחר
      const existingCar = await CarModel.findById(carId);
      if (!existingCar) {
        return res.status(404).json({
          success: false,
          message: "Car not found",
        });
      }

      if (existingCar.dealer_id !== user.id) {
        return res.status(403).json({
          success: false,
          message: "You can only update your own cars",
        });
      }

      const updateData: UpdateCarRequest = req.body;
      const updatedCar = await CarModel.update(carId, updateData);

      res.json({
        success: true,
        message: "Car updated successfully",
        data: updatedCar,
      });
    } catch (error) {
      console.error("Update car error:", error);
      res.status(500).json({
        success: false,
        message: "Failed to update car",
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }

  // מחיקת רכב (dealer בלבד - הרכב שלו)
  static async deleteCar(req: AuthRequest, res: Response) {
    try {
      const { user } = req;
      const carId = parseInt(req.params.id);

      if (!user || user.user_type !== "dealer") {
        return res.status(403).json({
          success: false,
          message: "Only dealers can delete cars",
        });
      }

      if (isNaN(carId)) {
        return res.status(400).json({
          success: false,
          message: "Invalid car ID",
        });
      }

      // בדיקה שהרכב שייך לסוחר
      const existingCar = await CarModel.findById(carId);
      if (!existingCar) {
        return res.status(404).json({
          success: false,
          message: "Car not found",
        });
      }

      if (existingCar.dealer_id !== user.id) {
        return res.status(403).json({
          success: false,
          message: "You can only delete your own cars",
        });
      }

      const deleted = await CarModel.delete(carId);

      if (deleted) {
        res.json({
          success: true,
          message: "Car deleted successfully",
        });
      } else {
        res.status(500).json({
          success: false,
          message: "Failed to delete car",
        });
      }
    } catch (error) {
      console.error("Delete car error:", error);
      res.status(500).json({
        success: false,
        message: "Failed to delete car",
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }

  // קבלת רכבים של סוחר ספציפי
  static async getDealerCars(req: AuthRequest, res: Response) {
    try {
      const { user } = req;
      const dealerId = parseInt(req.params.dealerId);

      if (isNaN(dealerId)) {
        return res.status(400).json({
          success: false,
          message: "Invalid dealer ID",
        });
      }

      // אם זה הסוחר עצמו, הוא יכול לראות גם רכבים לא זמינים
      let cars;
      if (user && user.user_type === "dealer" && user.id === dealerId) {
        cars = await CarModel.findByUserId(dealerId);
        cars = await CarModel.findAll({ dealer_id: dealerId });
      } else {
        // לאחרים - רק רכבים זמינים
        cars = await CarModel.findAll({
          dealer_id: dealerId,
          is_available: true,
        });
      }

      res.json({
        success: true,
        data: cars,
        count: cars.length,
      });
    } catch (error) {
      console.error("Get dealer cars error:", error);
      res.status(500).json({
        success: false,
        message: "Failed to fetch dealer cars",
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }
}
